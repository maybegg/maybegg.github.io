<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Promise/A+</title>
      <link href="/2018/07/23/Promise-A/"/>
      <url>/2018/07/23/Promise-A/</url>
      <content type="html"><![CDATA[<h2 id="Promise-A"><a href="#Promise-A" class="headerlink" title="Promise A+"></a>Promise A+</h2><ol><li><p>promise必须有三个状态 pending(等待态) fulfilled(成功态) rejected(失败态)</p><ul><li>当 state 是 <code>pending</code> 的时候<ul><li>可以将当前状态改变成其他状态(fulfilled or rejected)</li></ul></li><li>当 state 是 <code>fulfilled</code> 的时候<ul><li>不能转换成其他状态</li><li>必须有一个<code>value</code>(成功之后的值)</li></ul></li><li>当 state 是 <code>rejected</code> 的时候<ul><li>不能转换成其他状态</li><li>必须有一个<code>reason</code>(失败的原因) </li></ul></li></ul></li><li><p><code>then</code>方法</p><blockquote><p>一个promise必须提供一个<code>then</code>方法去获取当前的或最终的value or reason</p></blockquote></li></ol><blockquote><p>promise的<code>then</code>方法有两个参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure></p></blockquote><ul><li><code>onFulfilled</code> 和 <code>onRejected</code>都是可选的参数<ul><li>如果<code>onFulfilled</code>不是一个<code>function</code>，必须忽略它</li><li>如果<code>onRejected</code>不是一个<code>function</code>，必须忽略它</li></ul></li><li>如果<code>onFulfilled</code>是一个<code>function</code><ul><li>它必须在当前<code>promise</code>的状态变成<code>fulfilled</code>之后被调用，将promise的<code>value</code>(成功之后的值)作为他的第一个参数</li><li>在状态是<code>fulfilled</code>之前不能调用它</li><li>只能被调用一次</li></ul></li><li>如果<code>onRejected</code>是一个<code>function</code><ul><li>它必须在当前<code>promise</code>的状态变成<code>rejected</code>之后被调用，将promise的<code>reason</code>(失败的原因)作为他的第一个参数</li><li>在状态是<code>rejected</code>之前不能调用它</li><li>只能被调用一次</li></ul></li><li><code>onFulfilled</code> 和 <code>onRejected</code>都是异步调用(微任务)</li><li><code>onFulfilled</code> 和 <code>onRejected</code>必须作为一个函数被执行</li><li><code>then</code>可以在同一个<code>promise</code>上被多次调用<ul><li>如果promise当前状态是<code>fulfilled</code>，所有的<code>onFulfilled</code>回调都按顺序执行</li><li>如果promise当前状态是<code>rejected</code>，所有的<code>onRejected</code>回调都按顺序执行</li></ul></li><li><p><code>then</code>方法必须返回一个<code>promise</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise2 = promise1.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><ul><li>如果<code>onFulFilled</code> or <code>onRejected</code>返回了一个值<code>x</code>，运行promise解析程序</li><li>如果<code>onFulfilled</code> or <code>onRejected</code>抛出了一个异常<code>e</code>，<code>promise2</code>的状态必须是<code>rejected</code>，并将<code>e</code>作为<code>onRejected</code>的参数</li><li>如果<code>onFulfilled</code>不是一个<code>function</code>并且<code>promise1</code>是<code>fulfilled</code>，<code>promise2</code>必须也是<code>fulfilled</code>并且使用和<code>promise1</code>相同的<code>value</code></li><li>如果<code>onRejected</code>不是一个<code>function</code>并且<code>promise1</code>是<code>rejected</code>，<code>promise2</code>必须也是<code>rejected</code>并且使用和<code>promise1</code>相同的<code>reason</code></li></ul></li></ul><ol start="3"><li>promise的解析程序<blockquote><p>promise的解析程序是将<code>promise2</code>和<code>x</code>作为参数的函数</p></blockquote></li></ol><ul><li>如果<code>promise2</code>和<code>x</code>是一个promise，那么抛出一个<code>TypeError</code></li><li>如果<code>x</code>也是一个promise，</li><li>如果<code>x</code>是一个<code>object</code>或<code>function</code><ul><li>使用变量<code>then</code>存储<code>x.then</code></li><li>如果<code>x.then</code>会抛出异常<code>e</code>，调用promise的<code>reject</code>,并将<code>e</code>作为它的参数</li><li>如果<code>then</code>是一个<code>function</code>，使用<code>call</code>把它的<code>this</code>指向<code>x</code>，它的第一个参数是<code>resolvePromise</code>，第二个参数是<code>rejectPromise</code>:<ul><li>当<code>resolvePromise</code>被<code>y</code>值调用的时候，继续执行解析程序</li><li>当<code>rejectPromise</code>执行的时候，调用promise的<code>reject</code>并将将失败原因<code>r</code>作为它的参数</li></ul></li><li>如果<code>then</code>不是一个<code>object</code> or <code>function</code>，调用promise的<code>resolve</code>并将<code>x</code>作为它的参数<ul><li>如果<code>x</code>不是一个<code>object</code> or <code>function</code>，调用promise的<code>resolve</code>并将<code>x</code>作为它的参数</li></ul></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
            <tag> es6 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>canvas</title>
      <link href="/2018/07/03/canvas/"/>
      <url>/2018/07/03/canvas/</url>
      <content type="html"><![CDATA[<h2 id="canvas基础"><a href="#canvas基础" class="headerlink" title="canvas基础"></a>canvas基础</h2><h3 id="创建canvas"><a href="#创建canvas" class="headerlink" title="创建canvas"></a>创建canvas</h3><ol><li><p>通过html标签的方式 创建一个<code>id</code>为myCanvas的<code>canvas</code>标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=&apos;myCanvas&apos;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过js创建canvas</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var canvas - document.createElement(&apos;canvas&apos;);</span><br><span class="line">// 这个时候canvas在页面上是一个空白元素</span><br><span class="line">document.body.appendChild(canvas);</span><br></pre></td></tr></table></figure></li></ol><h3 id="canvas元素"><a href="#canvas元素" class="headerlink" title="canvas元素"></a>canvas元素</h3><p><code>注意 canvas如果不设置width和height 会有一个默认值 分别是width: 350px height: 150px</code><br>设置canvas元素宽高有三种方式：</p><ol><li><p>通过css设置(不推荐)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">css:</span><br><span class="line">    canvas &#123;</span><br><span class="line">        width: 400px;</span><br><span class="line">        height: 400px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">html:</span><br><span class="line">    &lt;canvas id=&apos;myCanvas&apos;&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line">js:</span><br><span class="line">    var canvas = document.querySelector(&apos;canvas&apos;);</span><br><span class="line">    console.log(&apos;width: &apos;, canvas.width, &apos;height: &apos;, canvas.height);</span><br><span class="line">    // 会发现此时打印的width是350，height是150  这说明在js里获取的是默认宽高，</span><br><span class="line">    // 而不是通过css设置的宽高</span><br></pre></td></tr></table></figure></li><li><p>直接在标签上设置</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=&apos;myCanvas&apos; height=&apos;400&apos; width=&apos;400&apos;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>通过js设置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">html:</span><br><span class="line">    &lt;canvas id=&apos;myCanvas&apos;&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line">js:</span><br><span class="line">    var canvas = document.querySelector(&apos;canvas&apos;);</span><br><span class="line">    canvas.width = 400;</span><br><span class="line">    canvas.height = 400;</span><br></pre></td></tr></table></figure><h3 id="获取canvas上下文"><a href="#获取canvas上下文" class="headerlink" title="获取canvas上下文"></a>获取canvas上下文</h3><p><code>我们用canvas来画图，实际上是操作的canvas的上下文环境对象context</code><br>使用canvas绘制图形，需要以下三步：</p><pre><code>1. 获取canvas对象2. 获取canvas上下文对象context3. 开始绘制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">html:</span><br><span class="line">    &lt;canvas id=&apos;myCanvas&apos; width=&apos;400&apos; height=&apos;400&apos; style=&apos;border: 1px solid #ccc&apos;&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line">js:</span><br><span class="line">    // 1. 获取canvas对象</span><br><span class="line">    var canvas = document.querySelector(&apos;canvas&apos;);</span><br><span class="line">    // 2. 获取canvas上下文对象context</span><br><span class="line">    var ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">    // 3. 开始绘制 实际操作的是刚刚获取的ctx</span><br><span class="line">    ctx.moveTo(50, 100);</span><br><span class="line">    ctx.lineTo(0, 0);</span><br><span class="line">    ctx.stroke();</span><br></pre></td></tr></table></figure></code></pre><h2 id="canvas-api"><a href="#canvas-api" class="headerlink" title="canvas api"></a>canvas api</h2><h3 id="直线"><a href="#直线" class="headerlink" title="直线"></a>直线</h3><p><code>canvas中的坐标系统是以canvas元素左上角为0，0   y轴方向向下</code></p><p>在canvas中 可以使用moveTo和lineTo这两个方法配合使用来画直线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.lineTo(x1, y1);</span><br><span class="line">ctx.lineTo(x2, y2);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h2 id="canvas常见动画"><a href="#canvas常见动画" class="headerlink" title="canvas常见动画"></a>canvas常见动画</h2>]]></content>
      
      <categories>
          
          <category> canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> canvas </tag>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hahaha</title>
      <link href="/2018/05/18/hahaha/"/>
      <url>/2018/05/18/hahaha/</url>
      <content type="html"><![CDATA[<ol><li>打开浏览器 F12 选中 console</li><li>选中 <code>(!(~+[])+{})[--[~+&quot;&quot;][+[]]*[~+[]] + ~~!+[]]+({}+[])[[~!+[]]*~+[]]</code> 复制到刚打开console上</li><li>回车</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/17/hello-world/"/>
      <url>/2018/05/17/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> bbb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aaa </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
